version: '3'

# This is a compose file for running the system in its entirety,
# For local development, use docker-compose.yml and execute microservices individually

services:
  frontend:
    image: 'frontend'
    build: 'frontend'
    ports:
      - '3000:80'
  identityStore:
    image: mongo
    restart: 'no'
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - db:/var/lib/mongodb/data
  identityService:
    image: 'identityservice'
    build: 'identityService'
    ports:
      - '3002:3002'
    depends_on:
      - identityStore
      - zookeeper
      - broker
  taskStore:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
  taskService:
    image: 'taskservice'
    build: 'taskService'
    ports:
      - '3001:3001'
    depends_on:
      - taskStore
      - zookeeper
      - broker
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:6.2.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
volumes:
  db:
    driver: local